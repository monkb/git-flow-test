name: Create RC Bump PR (to release)

on:
  workflow_dispatch:
    inputs:
      version_type:
        type: choice
        description: "버전 증가 선택 (rc-only / major / minor / patch)"
        options:
          - rc-only
          - major
          - minor
          - patch
        default: rc-only
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  bump_rc_pr:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_RC_NOTIFY: ${{ secrets.SLACK_WEBHOOK_RC_NOTIFY }}

    steps:
      - name: Checkout release
        uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

      - name: Read current version
        id: read_version
        run: |
          CURRENT=$(jq -r .version package.json)
          echo "current_version=$CURRENT" >> $GITHUB_OUTPUT

      - name: Calculate next RC version
        id: calc
        env:
          TYPE: ${{ github.event.inputs.version_type }}
          CURRENT: ${{ steps.read_version.outputs.current_version }}
        run: |
          BASE=$(echo "$CURRENT" | sed 's/-rc\..*//')
          CUR_RC=$(echo "$CURRENT" | grep -oE 'rc\.[0-9]+' | cut -d. -f2 || echo "")

          bump_major() { echo "$BASE" | awk -F. '{print $1+1".0.0"}'; }
          bump_minor() { echo "$BASE" | awk -F. '{print $1"."$2+1".0"}'; }
          bump_patch() { echo "$BASE" | awk -F. '{print $1"."$2"."$3+1}'; }

          case "$TYPE" in
            rc-only)
              if [ -n "$CUR_RC" ]; then
                RC_NUM=$((CUR_RC+1))
                NEXT="${BASE}-rc.${RC_NUM}"
              else
                NEXT="${BASE}-rc.1"
              fi
              ;;
            major)
              NEWBASE=$(bump_major)
              NEXT="${NEWBASE}-rc.1"
              ;;
            minor)
              NEWBASE=$(bump_minor)
              NEXT="${NEWBASE}-rc.1"
              ;;
            patch)
              NEWBASE=$(bump_patch)
              NEXT="${NEWBASE}-rc.1"
              ;;
            *)
              echo "지원하지 않는 version_type: $TYPE"; exit 1
              ;;
          esac


          echo "next_version=$NEXT" >> $GITHUB_OUTPUT
          echo "NEXT=$NEXT" >> $GITHUB_ENV

      - name: Create bump branch and commit
        run: |
          BR="bump/release-${NEXT}"
          git switch -c "$BR"

          jq ".version = \"${NEXT}\"" package.json > tmp && mv tmp package.json
          if [ -f package-lock.json ]; then
            jq ".version = \"${NEXT}\"" package-lock.json > tmp && mv tmp package-lock.json
            git add package.json package-lock.json
          else
            git add package.json
          fi

          git commit -m "bump: ${NEXT}"
          git push -u origin "$BR"

      - name: Open PR to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "bump: ${{ steps.calc.outputs.next_version }} → release" \
            --body "자동 생성된 RC bump PR입니다.\n- version: `${{ steps.calc.outputs.next_version }}`" \
            --base release \
            --head bump/release-${{ steps.calc.outputs.next_version }} \
            --label bump \
            --label rc

      # (옵션) Slack 알림 – 수신 Webhook을 secrets에 저장
      - name: Slack Notify (optional)
        if: ${{ env.SLACK_WEBHOOK_RC_NOTIFY != '' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            { "text": ":rocket: *RC Bump PR Created*\n*Version:* v${{ steps.calc.outputs.next_version }}\n*By:* ${{ github.actor }}\n*Branch:* release" }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_RC_NOTIFY }}
